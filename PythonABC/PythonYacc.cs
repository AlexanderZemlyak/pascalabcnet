// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-56159VE
// DateTime: 26.10.2023 21:09:18
// UserName: ????
// Input file <PythonYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.IO;
using PythonProgramTree;

namespace PythonParser
{
public enum Tokens {
    error=1,EOF=2,INDENT=3,UNINDENT=4,STUFF=5,SEMICOLON=6};

public struct ValueType
{ 
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from PythonYacc.y
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from PythonYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[9];
  private static State[] states = new State[13];
  private static string[] nonTerms = new string[] {
      "progr", "stuff", "block", "stlst", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{5,4,3,6},new int[]{-1,1,-2,3,-3,5});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-8);
    states[5] = new State(-3);
    states[6] = new State(new int[]{5,4,3,6},new int[]{-4,7,-2,11,-3,12});
    states[7] = new State(new int[]{4,8,6,9});
    states[8] = new State(-4);
    states[9] = new State(new int[]{5,4},new int[]{-2,10});
    states[10] = new State(-5);
    states[11] = new State(-6);
    states[12] = new State(-7);

    rules[1] = new Rule(-5, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-2});
    rules[3] = new Rule(-1, new int[]{-3});
    rules[4] = new Rule(-3, new int[]{3,-4,4});
    rules[5] = new Rule(-4, new int[]{-4,6,-2});
    rules[6] = new Rule(-4, new int[]{-2});
    rules[7] = new Rule(-4, new int[]{-3});
    rules[8] = new Rule(-2, new int[]{5});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


}
}
