// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  LAPTOP-MPBGOA9N
// DateTime: 12.11.2023 11:39:47
// UserName: krylo
// Input file <ParserABC.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using PascalABCCompiler.SyntaxTree;
using PascalABCCompiler.ParserTools;
using PascalABCCompiler.Errors;
using System.Linq;
using SyntaxVisitors;
using VeryBasicParser;

namespace VeryBasicParserYacc
{
public enum Tokens {
    error=1,EOF=2,FOR=3,IN=4,WHILE=5,IF=6,
    ELSE=7,INTNUM=8,REALNUM=9,LPAR=10,RPAR=11,LBRACE=12,
    RBRACE=13,LBRACKET=14,RBRACKET=15,DOT=16,COMMA=17,SEMICOLON=18,
    ASSIGN=19,PLUS=20,MINUS=21,MULTIPLY=22,DIVIDE=23,ID=24,
    LOWER=25,GREATER=26,LOWEREQUAL=27,GREATEREQUAL=28,EQUAL=29,NOTEQUAL=30};

public partial struct ValueType
{
	public expression ex;
	public ident id;
    public Object ob;
    public op_type_node op;
    public syntax_tree_node stn;
    public token_info ti;
    public type_definition td;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public partial class VeryBasicGPPGParser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from ParserABC.y
   	public syntax_tree_node root;
	public List<Error> errors;
    public string current_file_name;
    public int max_errors = 10;
	public VeryBasicParserTools parsertools;
    public List<compiler_directive> CompilerDirectives;
   	public VeryBasicGPPGParser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from ParserABC.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[26];
  private static State[] states = new State[46];
  private static string[] nonTerms = new string[] {
      "ident", "expr", "exprlist", "assign", "ifstatement", "stmt", "proccall", 
      "stlist", "block", "progr", "$accept", };

  static VeryBasicGPPGParser() {
    states[0] = new State(new int[]{24,21,12,34,6,39},new int[]{-10,1,-8,3,-6,37,-4,6,-1,7,-9,33,-5,38,-7,45});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{18,4,2,-2});
    states[4] = new State(new int[]{24,21,12,34,6,39},new int[]{-6,5,-4,6,-1,7,-9,33,-5,38,-7,45});
    states[5] = new State(-4);
    states[6] = new State(-5);
    states[7] = new State(new int[]{19,8,10,27});
    states[8] = new State(new int[]{24,21,8,22,9,23,10,24},new int[]{-2,9,-1,20});
    states[9] = new State(new int[]{20,10,22,12,21,14,25,16,26,18,18,-10,2,-10,13,-10});
    states[10] = new State(new int[]{24,21,8,22,9,23,10,24},new int[]{-2,11,-1,20});
    states[11] = new State(new int[]{20,-11,22,12,21,-11,25,-11,26,-11,18,-11,2,-11,13,-11,11,-11,17,-11,24,-11,12,-11,6,-11});
    states[12] = new State(new int[]{24,21,8,22,9,23,10,24},new int[]{-2,13,-1,20});
    states[13] = new State(-12);
    states[14] = new State(new int[]{24,21,8,22,9,23,10,24},new int[]{-2,15,-1,20});
    states[15] = new State(new int[]{20,-13,22,12,21,-13,25,-13,26,-13,18,-13,2,-13,13,-13,11,-13,17,-13,24,-13,12,-13,6,-13});
    states[16] = new State(new int[]{24,21,8,22,9,23,10,24},new int[]{-2,17,-1,20});
    states[17] = new State(new int[]{20,10,22,12,21,14,25,-14,26,-14,18,-14,2,-14,13,-14,11,-14,17,-14,24,-14,12,-14,6,-14});
    states[18] = new State(new int[]{24,21,8,22,9,23,10,24},new int[]{-2,19,-1,20});
    states[19] = new State(new int[]{20,10,22,12,21,14,25,-15,26,-15,18,-15,2,-15,13,-15,11,-15,17,-15,24,-15,12,-15,6,-15});
    states[20] = new State(-16);
    states[21] = new State(-9);
    states[22] = new State(-17);
    states[23] = new State(-18);
    states[24] = new State(new int[]{24,21,8,22,9,23,10,24},new int[]{-2,25,-1,20});
    states[25] = new State(new int[]{11,26,20,10,22,12,21,14,25,16,26,18});
    states[26] = new State(-19);
    states[27] = new State(new int[]{24,21,8,22,9,23,10,24},new int[]{-3,28,-2,32,-1,20});
    states[28] = new State(new int[]{11,29,17,30});
    states[29] = new State(-24);
    states[30] = new State(new int[]{24,21,8,22,9,23,10,24},new int[]{-2,31,-1,20});
    states[31] = new State(new int[]{20,10,22,12,21,14,25,16,26,18,11,-21,17,-21});
    states[32] = new State(new int[]{20,10,22,12,21,14,25,16,26,18,11,-20,17,-20});
    states[33] = new State(-6);
    states[34] = new State(new int[]{24,21,12,34,6,39},new int[]{-8,35,-6,37,-4,6,-1,7,-9,33,-5,38,-7,45});
    states[35] = new State(new int[]{13,36,18,4});
    states[36] = new State(-25);
    states[37] = new State(-3);
    states[38] = new State(-7);
    states[39] = new State(new int[]{24,21,8,22,9,23,10,24},new int[]{-2,40,-1,20});
    states[40] = new State(new int[]{20,10,22,12,21,14,25,16,26,18,24,21,12,34,6,39},new int[]{-6,41,-9,42,-4,6,-1,7,-5,38,-7,45});
    states[41] = new State(-22);
    states[42] = new State(new int[]{7,43,18,-6,2,-6,13,-6});
    states[43] = new State(new int[]{24,21,12,34,6,39},new int[]{-6,44,-4,6,-1,7,-9,33,-5,38,-7,45});
    states[44] = new State(-23);
    states[45] = new State(-8);

    rules[1] = new Rule(-11, new int[]{-10,2});
    rules[2] = new Rule(-10, new int[]{-8});
    rules[3] = new Rule(-8, new int[]{-6});
    rules[4] = new Rule(-8, new int[]{-8,18,-6});
    rules[5] = new Rule(-6, new int[]{-4});
    rules[6] = new Rule(-6, new int[]{-9});
    rules[7] = new Rule(-6, new int[]{-5});
    rules[8] = new Rule(-6, new int[]{-7});
    rules[9] = new Rule(-1, new int[]{24});
    rules[10] = new Rule(-4, new int[]{-1,19,-2});
    rules[11] = new Rule(-2, new int[]{-2,20,-2});
    rules[12] = new Rule(-2, new int[]{-2,22,-2});
    rules[13] = new Rule(-2, new int[]{-2,21,-2});
    rules[14] = new Rule(-2, new int[]{-2,25,-2});
    rules[15] = new Rule(-2, new int[]{-2,26,-2});
    rules[16] = new Rule(-2, new int[]{-1});
    rules[17] = new Rule(-2, new int[]{8});
    rules[18] = new Rule(-2, new int[]{9});
    rules[19] = new Rule(-2, new int[]{10,-2,11});
    rules[20] = new Rule(-3, new int[]{-2});
    rules[21] = new Rule(-3, new int[]{-3,17,-2});
    rules[22] = new Rule(-5, new int[]{6,-2,-6});
    rules[23] = new Rule(-5, new int[]{6,-2,-9,7,-6});
    rules[24] = new Rule(-7, new int[]{-1,10,-3,11});
    rules[25] = new Rule(-9, new int[]{12,-8,13});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> stlist
{
		var stl = ValueStack[ValueStack.Depth-1].stn as statement_list;
			stl.left_logical_bracket = new token_info("");
			stl.right_logical_bracket = new token_info("");
			var un = new unit_or_namespace(new ident_list("SF"),null);
			uses_list ul = null;
			if (ul == null)
			//var un1 = new unit_or_namespace(new ident_list("School"),null);
				ul = new uses_list(un,null);
			else ul.Insert(0,un);
			//ul.Add(un1);
			root = CurrentSemanticValue.stn = NewProgramModule(null, null, ul, new block(null, stl, CurrentLocationSpan), new token_info(""), CurrentLocationSpan);

	}
        break;
      case 3: // stlist -> stmt
{ CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, LocationStack[LocationStack.Depth-1]); }
        break;
      case 4: // stlist -> stlist, SEMICOLON, stmt
{ CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as statement_list).Add(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); }
        break;
      case 5: // stmt -> assign
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 6: // stmt -> block
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 7: // stmt -> ifstatement
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 8: // stmt -> proccall
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 9: // ident -> ID
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 10: // assign -> ident, ASSIGN, expr
{
			CurrentSemanticValue.stn = new assign(ValueStack[ValueStack.Depth-3].id as addressed_value, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan);
        }
        break;
      case 11: // expr -> expr, PLUS, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 12: // expr -> expr, MULTIPLY, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 13: // expr -> expr, MINUS, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 14: // expr -> expr, LOWER, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 15: // expr -> expr, GREATER, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 16: // expr -> ident
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 17: // expr -> INTNUM
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 18: // expr -> REALNUM
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 19: // expr -> LPAR, expr, RPAR
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex; }
        break;
      case 20: // exprlist -> expr
{ CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); }
        break;
      case 21: // exprlist -> exprlist, COMMA, expr
{ CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);  }
        break;
      case 22: // ifstatement -> IF, expr, stmt
{ CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-2].ex, ValueStack[ValueStack.Depth-1].stn as statement, null, CurrentLocationSpan); }
        break;
      case 23: // ifstatement -> IF, expr, block, ELSE, stmt
{ CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-3].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); }
        break;
      case 24: // proccall -> ident, LPAR, exprlist, RPAR
{
				CurrentSemanticValue.stn = new method_call(ValueStack[ValueStack.Depth-4].id as addressed_value, ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);
			}
        break;
      case 25: // block -> LBRACE, stlist, RBRACE
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn; }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


        public program_module NewProgramModule(program_name progName, Object optHeadCompDirs, uses_list mainUsesClose, syntax_tree_node progBlock, Object optPoint, LexLocation loc)
        {
            var progModule = new program_module(progName, mainUsesClose, progBlock as block, null, loc);
            progModule.Language = LanguageId.PascalABCNET;
            if (optPoint == null && progBlock != null)
            {
                var fp = progBlock.source_context.end_position;
                var err_stn = progBlock;
			    if ((progBlock is block) && (progBlock as block).program_code != null && (progBlock as block).program_code.subnodes != null && (progBlock as block).program_code.subnodes.Count > 0)
                    err_stn = (progBlock as block).program_code.subnodes[(progBlock as block).program_code.subnodes.Count - 1];
                parsertools.errors.Add(new PABCNETUnexpectedToken(parsertools.CurrentFileName, StringResources.Get("TKPOINT"), new SourceContext(fp.line_num, fp.column_num + 1, fp.line_num, fp.column_num + 1, 0, 0), err_stn));
            }
            return progModule;
        }
}
}
