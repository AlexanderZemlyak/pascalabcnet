// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-V3E9T2U
// DateTime: 25.05.2024 14:13:59
// UserName: alex
// Input file <YATL.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using PascalABCCompiler.SyntaxTree;
using PascalABCCompiler.ParserTools;
using PascalABCCompiler.Errors;
using System.Linq;
using YATL;

namespace YATLParserYacc
{
public enum Tokens {
    error=1,EOF=2,FOR=3,IN=4,WHILE=5,IF=6,
    ELSE=7,INTNUM=8,REALNUM=9,LPAR=10,RPAR=11,LBRACE=12,
    RBRACE=13,LBRACKET=14,RBRACKET=15,DOT=16,COMMA=17,COLON=18,
    SEMICOLON=19,INDENT=20,UNINDENT=21,ASSIGN=22,PLUS=23,MINUS=24,
    MULTIPLY=25,DIVIDE=26,ID=27,LOWER=28,GREATER=29,LOWEREQUAL=30,
    GREATEREQUAL=31,EQUAL=32,NOTEQUAL=33};

public partial struct ValueType
{
	public expression ex;
	public ident id;
    public Object ob;
    public op_type_node op;
    public syntax_tree_node stn;
    public token_info ti;
    public type_definition td;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public partial class YATLGPPGParser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from YATL.y
   	public syntax_tree_node root;
	public List<Error> errors;
    public string current_file_name;
    public int max_errors = 10;
	public YATLParserTools parsertools;
    public List<compiler_directive> CompilerDirectives;
   	public YATLGPPGParser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from YATL.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[30];
  private static State[] states = new State[52];
  private static string[] nonTerms = new string[] {
      "ident", "expr", "var_reference", "variable", "proc_func_call", "exprlist", 
      "assign", "ifstatement", "stmt", "proccall", "stlist", "block", "progr", 
      "$accept", };

  static YATLGPPGParser() {
    states[0] = new State(new int[]{27,27,20,36,6,41},new int[]{-13,1,-11,3,-9,51,-7,6,-1,7,-12,35,-8,40,-10,48,-3,49,-4,50,-5,28});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{19,4,2,-2});
    states[4] = new State(new int[]{27,27,20,36,6,41},new int[]{-9,5,-7,6,-1,7,-12,35,-8,40,-10,48,-3,49,-4,50,-5,28});
    states[5] = new State(-4);
    states[6] = new State(-5);
    states[7] = new State(new int[]{22,8,10,22,19,-26,2,-26});
    states[8] = new State(new int[]{27,27,8,29,9,30,10,31},new int[]{-2,9,-4,20,-1,21,-5,28});
    states[9] = new State(new int[]{23,10,25,12,24,14,28,16,29,18,19,-10,2,-10});
    states[10] = new State(new int[]{27,27,8,29,9,30,10,31},new int[]{-2,11,-4,20,-1,21,-5,28});
    states[11] = new State(new int[]{23,-11,25,12,24,-11,28,-11,29,-11,19,-11,2,-11,11,-11,17,-11,18,-11});
    states[12] = new State(new int[]{27,27,8,29,9,30,10,31},new int[]{-2,13,-4,20,-1,21,-5,28});
    states[13] = new State(-12);
    states[14] = new State(new int[]{27,27,8,29,9,30,10,31},new int[]{-2,15,-4,20,-1,21,-5,28});
    states[15] = new State(new int[]{23,-13,25,12,24,-13,28,-13,29,-13,19,-13,2,-13,11,-13,17,-13,18,-13});
    states[16] = new State(new int[]{27,27,8,29,9,30,10,31},new int[]{-2,17,-4,20,-1,21,-5,28});
    states[17] = new State(new int[]{23,10,25,12,24,14,28,-14,29,-14,19,-14,2,-14,11,-14,17,-14,18,-14});
    states[18] = new State(new int[]{27,27,8,29,9,30,10,31},new int[]{-2,19,-4,20,-1,21,-5,28});
    states[19] = new State(new int[]{23,10,25,12,24,14,28,-15,29,-15,19,-15,2,-15,11,-15,17,-15,18,-15});
    states[20] = new State(-16);
    states[21] = new State(new int[]{10,22,23,-26,25,-26,24,-26,28,-26,29,-26,19,-26,2,-26,11,-26,17,-26,18,-26});
    states[22] = new State(new int[]{27,27,8,29,9,30,10,31},new int[]{-6,23,-2,34,-4,20,-1,21,-5,28});
    states[23] = new State(new int[]{11,24,17,25});
    states[24] = new State(-29);
    states[25] = new State(new int[]{27,27,8,29,9,30,10,31},new int[]{-2,26,-4,20,-1,21,-5,28});
    states[26] = new State(new int[]{23,10,25,12,24,14,28,16,29,18,11,-21,17,-21});
    states[27] = new State(-9);
    states[28] = new State(-27);
    states[29] = new State(-17);
    states[30] = new State(-18);
    states[31] = new State(new int[]{27,27,8,29,9,30,10,31},new int[]{-2,32,-4,20,-1,21,-5,28});
    states[32] = new State(new int[]{11,33,23,10,25,12,24,14,28,16,29,18});
    states[33] = new State(-19);
    states[34] = new State(new int[]{23,10,25,12,24,14,28,16,29,18,11,-20,17,-20});
    states[35] = new State(-6);
    states[36] = new State(new int[]{27,27,20,36,6,41},new int[]{-11,37,-9,51,-7,6,-1,7,-12,35,-8,40,-10,48,-3,49,-4,50,-5,28});
    states[37] = new State(new int[]{19,38});
    states[38] = new State(new int[]{21,39,27,27,20,36,6,41},new int[]{-9,5,-7,6,-1,7,-12,35,-8,40,-10,48,-3,49,-4,50,-5,28});
    states[39] = new State(-28);
    states[40] = new State(-7);
    states[41] = new State(new int[]{27,27,8,29,9,30,10,31},new int[]{-2,42,-4,20,-1,21,-5,28});
    states[42] = new State(new int[]{18,43,23,10,25,12,24,14,28,16,29,18});
    states[43] = new State(new int[]{20,36},new int[]{-12,44});
    states[44] = new State(new int[]{7,45,19,-22,2,-22});
    states[45] = new State(new int[]{18,46});
    states[46] = new State(new int[]{20,36},new int[]{-12,47});
    states[47] = new State(-23);
    states[48] = new State(-8);
    states[49] = new State(-24);
    states[50] = new State(-25);
    states[51] = new State(-3);

    rules[1] = new Rule(-14, new int[]{-13,2});
    rules[2] = new Rule(-13, new int[]{-11});
    rules[3] = new Rule(-11, new int[]{-9});
    rules[4] = new Rule(-11, new int[]{-11,19,-9});
    rules[5] = new Rule(-9, new int[]{-7});
    rules[6] = new Rule(-9, new int[]{-12});
    rules[7] = new Rule(-9, new int[]{-8});
    rules[8] = new Rule(-9, new int[]{-10});
    rules[9] = new Rule(-1, new int[]{27});
    rules[10] = new Rule(-7, new int[]{-1,22,-2});
    rules[11] = new Rule(-2, new int[]{-2,23,-2});
    rules[12] = new Rule(-2, new int[]{-2,25,-2});
    rules[13] = new Rule(-2, new int[]{-2,24,-2});
    rules[14] = new Rule(-2, new int[]{-2,28,-2});
    rules[15] = new Rule(-2, new int[]{-2,29,-2});
    rules[16] = new Rule(-2, new int[]{-4});
    rules[17] = new Rule(-2, new int[]{8});
    rules[18] = new Rule(-2, new int[]{9});
    rules[19] = new Rule(-2, new int[]{10,-2,11});
    rules[20] = new Rule(-6, new int[]{-2});
    rules[21] = new Rule(-6, new int[]{-6,17,-2});
    rules[22] = new Rule(-8, new int[]{6,-2,18,-12});
    rules[23] = new Rule(-8, new int[]{6,-2,18,-12,7,18,-12});
    rules[24] = new Rule(-10, new int[]{-3});
    rules[25] = new Rule(-3, new int[]{-4});
    rules[26] = new Rule(-4, new int[]{-1});
    rules[27] = new Rule(-4, new int[]{-5});
    rules[28] = new Rule(-12, new int[]{20,-11,19,21});
    rules[29] = new Rule(-5, new int[]{-1,10,-6,11});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> stlist
{
		var stl = ValueStack[ValueStack.Depth-1].stn as statement_list;
		var decl = new declarations();
		root = CurrentSemanticValue.stn = NewProgramModule(null, null, null, new block(decl, stl, CurrentLocationSpan), new token_info(""), CurrentLocationSpan);
		}
        break;
      case 3: // stlist -> stmt
{ CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, LocationStack[LocationStack.Depth-1]); }
        break;
      case 4: // stlist -> stlist, SEMICOLON, stmt
{ CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as statement_list).Add(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); }
        break;
      case 5: // stmt -> assign
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 6: // stmt -> block
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 7: // stmt -> ifstatement
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 8: // stmt -> proccall
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 9: // ident -> ID
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 10: // assign -> ident, ASSIGN, expr
{
			var vds = new var_def_statement(new ident_list(ValueStack[ValueStack.Depth-3].id, LocationStack[LocationStack.Depth-3]), null, ValueStack[ValueStack.Depth-1].ex, definition_attribute.None, false, CurrentLocationSpan);
			CurrentSemanticValue.stn = new var_statement(vds, CurrentLocationSpan);
		}
        break;
      case 11: // expr -> expr, PLUS, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 12: // expr -> expr, MULTIPLY, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 13: // expr -> expr, MINUS, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 14: // expr -> expr, LOWER, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 15: // expr -> expr, GREATER, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 16: // expr -> variable
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;}
        break;
      case 17: // expr -> INTNUM
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 18: // expr -> REALNUM
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 19: // expr -> LPAR, expr, RPAR
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex; }
        break;
      case 20: // exprlist -> expr
{ CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); }
        break;
      case 21: // exprlist -> exprlist, COMMA, expr
{ CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);  }
        break;
      case 22: // ifstatement -> IF, expr, COLON, block
{ CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, null, CurrentLocationSpan); }
        break;
      case 23: // ifstatement -> IF, expr, COLON, block, ELSE, COLON, block
{ CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-6].ex, ValueStack[ValueStack.Depth-4].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan); }
        break;
      case 24: // proccall -> var_reference
{
				CurrentSemanticValue.stn = new procedure_call(ValueStack[ValueStack.Depth-1].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex is ident, CurrentLocationSpan);
			}
        break;
      case 25: // var_reference -> variable
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 26: // variable -> ident
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 27: // variable -> proc_func_call
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 28: // block -> INDENT, stlist, SEMICOLON, UNINDENT
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-3].stn as statement_list; }
        break;
      case 29: // proc_func_call -> ident, LPAR, exprlist, RPAR
{ CurrentSemanticValue.ex = new method_call(ValueStack[ValueStack.Depth-4].id as addressed_value,ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


        public program_module NewProgramModule(program_name progName, Object optHeadCompDirs, uses_list mainUsesClose, syntax_tree_node progBlock, Object optPoint, LexLocation loc)
        {
            var progModule = new program_module(progName, mainUsesClose, progBlock as block, null, loc);
            progModule.Language = LanguageId.PascalABCNET;
            if (optPoint == null && progBlock != null)
            {
                var fp = progBlock.source_context.end_position;
                var err_stn = progBlock;
			    if ((progBlock is block) && (progBlock as block).program_code != null && (progBlock as block).program_code.subnodes != null && (progBlock as block).program_code.subnodes.Count > 0)
                    err_stn = (progBlock as block).program_code.subnodes[(progBlock as block).program_code.subnodes.Count - 1];
                parsertools.errors.Add(new YATLUnexpectedToken(parsertools.CurrentFileName, StringResources.Get("TKPOINT"), new SourceContext(fp.line_num, fp.column_num + 1, fp.line_num, fp.column_num + 1, 0, 0), err_stn));
            }
            return progModule;
        }
}
}
